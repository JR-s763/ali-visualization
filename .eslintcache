[{"E:\\Alibaba\\3\\src\\index.js":"1","E:\\Alibaba\\3\\src\\Dashboard.js":"2","E:\\Alibaba\\3\\src\\views\\View3\\index.js":"3","E:\\Alibaba\\3\\src\\views\\View6\\index.js":"4","E:\\Alibaba\\3\\src\\views\\View1\\index.js":"5","E:\\Alibaba\\3\\src\\views\\View2\\index.js":"6","E:\\Alibaba\\3\\src\\views\\View4\\index.js":"7","E:\\Alibaba\\3\\src\\charts\\Chart1\\index.js":"8","E:\\Alibaba\\3\\src\\charts\\Chart2\\index.js":"9","E:\\Alibaba\\3\\src\\charts\\Chart5\\index.js":"10","E:\\Alibaba\\3\\src\\charts\\JobChart\\index.js":"11","E:\\Alibaba\\3\\src\\charts\\Chart3\\index.js":"12"},{"size":193,"mtime":1615098192000,"results":"13","hashOfConfig":"14"},{"size":4073,"mtime":1616061599850,"results":"15","hashOfConfig":"14"},{"size":285,"mtime":1615820022972,"results":"16","hashOfConfig":"14"},{"size":283,"mtime":1615820100742,"results":"17","hashOfConfig":"14"},{"size":286,"mtime":1615820066909,"results":"18","hashOfConfig":"14"},{"size":283,"mtime":1615820038710,"results":"19","hashOfConfig":"14"},{"size":353,"mtime":1616054677689,"results":"20","hashOfConfig":"14"},{"size":3401,"mtime":1616061212923,"results":"21","hashOfConfig":"14"},{"size":4205,"mtime":1616043107927,"results":"22","hashOfConfig":"14"},{"size":4321,"mtime":1615819103653,"results":"23","hashOfConfig":"14"},{"size":5438,"mtime":1616054173729,"results":"24","hashOfConfig":"14"},{"size":9806,"mtime":1616030629203,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1wm15ln",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},"E:\\Alibaba\\3\\src\\index.js",[],["57","58"],"E:\\Alibaba\\3\\src\\Dashboard.js",["59"],"import React, { Component } from 'react';\n// import data from './data';\nimport { Layout} from 'antd';\nimport View1 from './views/View1';\nimport View2 from './views/View2';\nimport View3 from './views/View3';\nimport View4 from './views/View4';\n// import View5 from './views/View5';\nimport View6 from './views/View6';\nimport './dashboard.css';\n\nconst { Sider, Content, Footer } = Layout;\n\nexport default class Dashboard extends Component {\n\n\n    render() {\n     \n        return (\n            <div>\n                <Layout height={document.body.clientHeight/10}>\n                    <header>\n                        <div style={{textAlign:'center',fontSize:30,backgroundColor:'#fff'}}> <h3 >Alibaba集群数据可视化</h3></div>\n                    </header>\n                </Layout>\n                \n                \n                <Layout height={document.body.clientHeight/5*2}>\n                    <Layout width={document.body.clientWidth/2}style={{backgroundColor:'#fff'}}><View4/></Layout>\n                    <Sider width={document.body.clientWidth/2}style={{backgroundColor:'#fff'}}><View2/></Sider>\n                </Layout>\n                <Layout height={document.body.clientHeight/5*2}>\n                    <Sider width={document.body.clientWidth/4}><View3/></Sider>\n                    <Sider width={document.body.clientWidth/2} style={{backgroundColor:'#fff'}}><View1/></Sider>\n                    <Sider width={document.body.clientWidth/4} style={{backgroundColor:'#fff'}}><View6/></Sider>\n                    \n                </Layout>\n                {/* <Layout style={{ height: 900 }}>\n                    <Sider width={600} style={{backgroundColor:'#eee'}}>\n                        <Content style={{ height: 400 }}>\n                            <View1/>\n                        </Content>\n                        <Content style={{ height: 400 }}>\n                            <View2 />\n                        </Content>\n                        \n                    </Sider>\n                    <Content style={{ height: 400}}>\n                            <View3 />\n                    </Content> */}\n                    \n                    {/* <Content>\n                        \n                    </Content> */}\n                    \n                    {/* <Layout> */}\n                        {/* <Layout>\n                       \n                        <Content>\n                            <View4 />\n                        </Content>\n                            <Sider width={500} style={{backgroundColor:'#eee'}}>\n                                <View6 />\n                            </Sider>\n                        \n                       </Layout> */}\n\n                      \n                        {/* <Layout style={{ height: 500 }}>\n                            <Content>\n                                <View5 />\n                            </Content>\n                           \n                        </Layout> */}\n                    {/* </Layout> */}\n                    {/* <Layout>\n                        <Slider width={500} style={{backgroundColor:'#eee'}}>\n                            <View3 />\n                        </Slider>\n                    </Layout> */}\n\n                    {/* <Sider width={600} style={{backgroundColor:'#eee'}}>\n                        <Content style={{ height: 400 }}>\n                            <View4/>\n                        </Content>\n                        <Content style={{ height: 400 }}>\n                            <View6/>\n                        </Content>\n                    </Sider>\n\n                </Layout> */}\n                {/* <Layout>\n                    \n                        \n                </Layout> */}\n\n                <Layout height={document.body.clientHeight/20}>\n                    <Footer>\n                        <div style={{textAlign:'center'}}>\n                            JZ20-022基于Alibaba集群数据的运维可视化系统\n                        </div>\n                    </Footer>\n                </Layout>\n            </div>\n        )\n    }\n}\n","E:\\Alibaba\\3\\src\\views\\View3\\index.js",[],"E:\\Alibaba\\3\\src\\views\\View6\\index.js",[],"E:\\Alibaba\\3\\src\\views\\View1\\index.js",[],"E:\\Alibaba\\3\\src\\views\\View2\\index.js",[],"E:\\Alibaba\\3\\src\\views\\View4\\index.js",[],"E:\\Alibaba\\3\\src\\charts\\Chart1\\index.js",["60","61","62"],"import React, { Component } from 'react';\n// import *as d3 from 'd3'\nimport *as echarts from 'echarts'\nimport data from './1.json'\n\n\n\nexport default class Chart1 extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        }\n    }\n    componentDidMount() {\n        this.draw();\n    \n    }\n    draw =()=> {\n        //在这里画图\n        var myChart= echarts.init(document.getElementById(\"view1\"));\n        var app = {};\n        var option;\n        var option = {\n            // title: {\n            //     text: 'Describe CPU utilization and memory utilization',\n            //     left: 'center',\n            //     top: 0\n            // },\n            visualMap: {\n                min: 0,\n                max: 100,\n                dimension: 1,\n                orient: 'vertical',\n                right: 50,\n                top: 'center',\n                text: ['HIGH', 'LOW'],\n                textStyle:{\n                    fontSize: 20\n                },\n                itemWidth:20,\n                itemHeight:100,\n                calculable: true,\n                inRange: {\n                    color: ['#f2c31a', '#24b7f2']\n                }\n            },\n            tooltip: {\n                 backgroundColor: ['rgba(255,255,255,0.7)'],\n                         formatter: function (object) {\n                             var value = object.value;\n                             //console.log(value);\n                             return '<div style=\"border-bottom: 1px solid rgba(255,255,255,.3); font-size: 18px;padding-bottom: 7px;margin-bottom: 7px\">'\n                                + 'cpu_u：'   + value[0] +'%' +'<br>'\n                                + 'mem_u：'  + value[1]+'%' ;\n                         },\n                \n                trigger: 'item',\n                axisPointer: {\n                    type: 'cross'\n                }\n            },\n            xAxis: [{\n                name:'Cpu_u',\n                nameGap:16,//坐标轴名称与轴线之间的距离，注意是三维空间的距离而非屏幕像素值。\n                nameTextStyle: {\n                            fontSize: 20\n                        },\n                axisLabel:{fontSize:20},\n                type: 'value',\n            splitLine: {\n                show: false\n            }\n            }],\n            yAxis: [{\n                name:'Mem_u',\n                nameTextStyle: {\n                            fontSize: 20\n                        },\n                axisLabel:{fontSize:20},\n                type: 'value',\n            splitLine: {\n                show: false\n            }\n            }],\n            series: [{\n                name: 'cpu_u',\n                nameTextStyle: {\n                            fontSize: 20\n                        },\n                type: 'scatter',\n                symbolSize: 5,\n                itemStyle: {\n                    normal: {\n                        borderWidth: 0.6,\n                        borderColor: '#fff'\n                    }\n                },\n                data: data\n            }]\n        };\n    \n        myChart.setOption(option);\n        // if (option && typeof option === 'object') {\n        //     myChart.setOption(option);\n        // }\n        // myChart.clear()\n\n    } \n\n    render() {\n        return (\n            <div id=\"view1\"></div>\n        )\n    }\n}","E:\\Alibaba\\3\\src\\charts\\Chart2\\index.js",["63"],"import React, { Component } from 'react';\n// import *as d3 from 'd3'\nimport *as echarts from 'echarts'\nimport data from './machine_usage_all.json'\nimport river  from '../Chart3/index.js'\nimport LineChart from '../JobChart/index.js';\n\n\n\n\n/*for (let i = 0; i <= Math.round(99319 / 60); i++) {\n    machine_abnormal_num[i] = 0\n    time_stamp[i] = i\n}*/\n\n\n\nexport default class Chart2 extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n        }\n    }\n    componentDidMount() {\n        this.draw();\n    \n    }\n    \n    draw =()=> {\n        //在这里画图\n        var myChart1 = echarts.init(document.getElementById('view2'));\n        var machine_duqu_flag = false;\n        var machine_data = [];\n        var machine_cpu_num = [],\n            machine_disaster_level_1 = [],\n            machine_disaster_level_2 = [];\n        var machine_machine_id = [],\n            machine_mem_size = [],\n            machine_status = [],\n            machine_time_stamp = [];\n        var machine_abnormal_num = [],\n            time_stamp = [];\n        for (var i=0;i<data.length;i++){\n            machine_data.push(data[i])\n            machine_cpu_num.push(data[i].cpu_num);\n            machine_disaster_level_1.push(data[i].disaster_level_1)\n            machine_disaster_level_2.push(data[i].disaster_level_2)\n            machine_machine_id.push(data[i].machine_id)\n            machine_mem_size.push(data[i].mem_size)\n            machine_status.push(data[i].status)\n            machine_time_stamp.push(data[i].time_stamp)\n            machine_abnormal_num.push(data[i].countNum)\n            time_stamp.push(data[i].timeStamp)\n        }\n        myChart1.setOption( {\n            title: {\n                text: ''\n            },\n            tooltip: {\n                trigger: 'axis'\n            },\n            xAxis: {\n                data: time_stamp\n            },\n            yAxis: {\n                splitLine: {\n                    show: false\n                }\n            },\n            toolbox: {\n                left: 'center',\n                feature: {\n                    dataZoom: {\n                        yAxisIndex: 'none'\n                    },\n                    restore: {},\n                    saveAsImage: {}\n                }\n            },\n            dataZoom: [{\n                startValue: '11'\n            }, {\n                type: 'inside'\n            }],\n            visualMap: {\n                top: 10,\n                right: 10,\n                pieces: [{\n                    gt: 0,\n                    lte: 200,\n                    color: '#096'\n                }, {\n                    gt: 200,\n                    lte: 300,\n                    color: '#ffde33'\n                }, {\n                    gt: 300,\n                    lte: 400,\n                    color: '#ff9933'\n                }, {\n                    gt: 400,\n                    lte: 500,\n                    color: '#cc0033'\n                }, {\n                    gt: 500,\n                    lte: 600,\n                    color: '#660099'\n                }, {\n                    gt: 600,\n                    color: '#7e0023'\n                }],\n                outOfRange: {\n                    color: '#999'\n                }\n            },\n            series: {\n                name: '',\n                type: 'line',\n                data: machine_abnormal_num,\n                markLine: {\n                    silent: true,\n                    data: [{\n                        yAxis: 50\n                    }, {\n                        yAxis: 100\n                    }, {\n                        yAxis: 150\n                    }, {\n                        yAxis: 200\n                    }, {\n                        yAxis: 300\n                    }]\n                }\n            }\n        });\n        myChart1.on('click',function(params){\n            // console.log(params.name)\n            var time_=params.name;\n            new river().draw(time_);\n            // a.draw(time_);\n            new LineChart().draw(time_)\n            \n        })\n       \n}\n\n    render() {\n        return (\n            <div >\n                \n            </div>\n        )\n    }\n}",["64","65"],"E:\\Alibaba\\3\\src\\charts\\Chart5\\index.js",[],"E:\\Alibaba\\3\\src\\charts\\JobChart\\index.js",["66"],"import React, { Component } from 'react';\nimport *as d3 from 'd3'               //引入D3\nimport data from './batch_task.json' //引入数据\n// import *as echarts from 'echarts'\n// import './style.css';\n// import {event}  from 'd3'\n\nvar time;\n// console.log(data)\nexport default class LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n\n  \n  componentDidMount() {\n    this.draw();\n\n  }\n   \n\n  draw =(time)=> {\n\n    d3.select('.vis-barchart > *').remove();\n    //初始化数据\n    console.log(time);\n    jl(time);\n    \n      function jl(time){\n        \n        var width= document.getElementById(\"view4\").clientWidth;\n\t    var height = document.getElementById(\"view4\").clientHeight;\n        // var time = 87076 //点击事件时间 作为接口\n        // var width = 500; //svg宽度\n        // var height = 500; //svg高度\n\n        function links_data(data) {\n\n            var nodes = [];\n            var edges = [];\n            for (let i in data) {\n                nodes.push(data[i].task_name)\n                nodes.push(data[i].job_name)\n            }\n            nodes = [...new Set(nodes)]; //获取节点名字，即所有task和job的名字\n        \n            for (let i in data) {\n                //添加边，source，和target代表两个节点之间的联系从source到target\n                //weight暂时为此任务inst_num的数量 由于相差过大 利用 多次开根号缩小其差距（可用其他算法代替）\n                //color暂用taskname长度随机\n                // console.log(data[i].job_name)\n                edges.push({ source: nodes.indexOf(data[i].job_name), target: nodes.indexOf(data[i].task_name), weight: Math.sqrt(Math.sqrt(+data[i].inst_num)), color: data[i].task_name.length });\n            }\n            nodes = nodes.map(function(item) {\n                return { name: item }\n            })\n        \n            return { nodes, edges }\n        }\n        \n        function draw_chart(dataset) {\n            var w = width;\n            var h = height\n            var colors = d3.scale.category20()\n            var force = d3.layout.force()\n                .nodes(dataset.nodes) //加载节点数据\n                .links(dataset.edges) //加载边数据\n                .size([w, h]) //设置有效空间的大小\n                .linkDistance(50) //连线的长度\n                .charge(-200) //负电荷量，相互排斥设置的负值越大越排斥\n                .start(); //设置生效\n        \n            var svg = d3.select(\"#view4\")\n                .append(\"svg\")\n                .attr(\"width\", w)\n                .attr(\"height\", h);\n        \n            //(3)创建作为连线的svg直线\n            var edges = svg.selectAll(\"line\")\n                .data(dataset.edges)\n                .enter()\n                .append(\"line\")\n                .style(\"stroke\", function(d) { //  设置线的颜色\n                    return colors(d.color);\n                })\n                .style(\"stroke-width\", function(d, i) { //设置线的宽度\n                    return d.weight;\n                });\n        \n            //(4) 创建作为连线的svg圆形\n            var nodes = svg.selectAll(\"circle\")\n                .data(dataset.nodes)\n                .enter()\n                .append(\"circle\")\n                .attr(\"r\", function(d) { //设置圆点的半径，圆点的度越大weight属性值越大，可以对其做一点数学变换\n                    return Math.log(d.weight) * 10 + 5;\n                })\n                .style(\"fill\", function(d) {\n        \n                    return colors(d.weight * d.weight * d.weight);\n                })\n                .call(force.drag); //可以拖动\n        \n            //(5)打点更新，没有的话就显示不出来了\n            force.on(\"tick\", function() {\n                //边\n                edges.attr(\"x1\", function(d) {\n                        return d.source.x;\n                    })\n                    .attr(\"y1\", function(d) {\n                        return d.source.y;\n                    })\n                    .attr(\"x2\", function(d) {\n                        return d.target.x;\n                    })\n                    .attr(\"y2\", function(d) {\n                        return d.target.y;\n                    });\n        \n                //节点\n                nodes.attr(\"cx\", function(d) {\n                        return d.x;\n                    })\n                    .attr(\"cy\", function(d) {\n                        return d.y;\n                    });\n        \n            })\n        }\n        \n        function get_pridata(time, data) {\n            var priData = [];\n            for (var i in data) {\n                // console.log(data[i])\n                if (data[i].start_time <= time && data[i].end_time >= time) {\n                    priData.push(data[i])\n                }\n            }\n            return priData\n        }\n        \n        var priData = get_pridata(time, data);\n        var { nodes, edges } = links_data(priData) //转换数据的格式\n        var force_data = { nodes: nodes, edges: edges }\n        draw_chart(force_data)\n        // var net=document.getElementById('view4')\n        // d3.csv('./batch_task/batch_task1.csv', function(data) {\n        \n            \n        // })\n\n        \n      }\n        \n    \n\n  }\n  render() {\n    return (\n        \n        <div id=\"view4\" ></div>\n    )\n  }\n}\n","E:\\Alibaba\\3\\src\\charts\\Chart3\\index.js",["67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82"],"import React, { Component } from 'react';\nimport *as d3 from 'd3'\nimport *as echarts from 'echarts'\nimport $ from 'jquery'\nimport data from './batch_task_info.json'\n\nvar time_;\nexport default class River extends Component {\n\n    constructor(props) {\n        super(props);\n        // console.log(props);\n        this.state = {\n        \n        }\n    }\n    componentDidMount() {\n        this.draw();\n    \n    }\n    \n    draw =(time_)=> {\n        //在这里画图\n    //    time_=253170;\n    console.log(time_);\n      xr(time_);\n        function xr(time_) {\n            var myChart4 = echarts.init(document.getElementById('view3'));\n                function compute_value(params) {\n                    for (let param of params) \n                    {\t\t\n                        // console.log(param);\n                        param.value += getchildvalue(param.children);\n        \n                    }\n                    return params\n                }\n        \n                function getchildvalue(arrs) {\n                    let child_value = 0;\n        \n                    for (let arr of arrs) {\n                        if (arr.children != null) {\n        \n                            child_value += getchildvalue(arr.children);\n        \n                        }\n                        child_value += arr.value\n        \n                    }\n                    // console.log(arrs, child_value)\n                    return child_value;\n                }\n        \n        \n                function data_get(time) {\n                    function generateOptions(params) { //生成Cascader级联数据\n                        var result = [];\n                        for (let param of params) {\n                            if (param.parentId == 0) { //判断是否为顶层节点\n                                var parent = { //转换成el-Cascader可以识别的数据结构\n                                    'name': param.name,\n                                    'value1': param.id,\n                                    \"value\": param.value\n        \n                                }\n                                // console.log(param)\n                                parent.children = getchilds(param.id, params); //获取子节点\n                                result.push(parent);\n                            }\n                        }\n                        return result;\n                    }\n        \n                    function getchilds(id, array) {\n                        let childs = new Array();\n                        for (let arr of array) { //循环获取子节点\n                            if (arr.parentId == id) {\n                                childs.push({\n                                    'name': arr.name,\n                                    'value1': arr.id,\n                                    'value': arr.value\n        \n                                });\n                            }\n                        }\n                        for (let child of childs) { //获取子节点的子节点\n                            let childscopy = getchilds(child.value1, array); //递归获取子节点\n                            // console.log(child)\n                            if (childscopy.length > 0) {\n                                child.children = childscopy;\n                            }\n                        }\n                        return childs;\n                    }\n        \n                    //关于时间time 的旭日图数据生成\n        \n        \n        \n                    var chart_data = [];\n                    var job_data = [];\n                    var time_data = [];\n                    var task_job = [];\n                    var task_name_first = []\n                    var iter_id = 1\n                    // console.log(data)\n        \n                    for (let i of data) {\n                        for (let j in i) {\n                            if (j == 0) {\n                                if (i[1].start_time <= time && i[1].end_time >= time) {\n                                    job_data.push({\n                                        name: i[0],\n                                        id: iter_id,\n                                        parentId: 0,\n                                        time: i[1].start_time,\n                                        value: 0\n                                    });\n                                    iter_id++;\n                                }\n                                continue;\n                            } else if (i[j].start_time <= time && i[j].end_time >= time) {\n                                time_data.push(i[j])\n        \n                            }\n                        }\n                    }\n        \n                    //独立任务 为父级 \n                    //非独立任务 后面处理\n                    for (let i of time_data) {\n        \n                        task_name_first.push(i.task_name.slice(0, 1))\n                        if (i.task_name.slice(0, 1) >= 'a' && i.task_name.slice(0, 1) <= 'z') {\n                            chart_data.push({\n                                name: i.task_name,\n                                id: iter_id,\n                                parentId: 0,\n                                time: i.start_time,\n                                value: i.inst_num\n                            })\n                            iter_id++;\n                        } else {\n                            // console.log(i.task_name.slice(1).split('_'))\n                            task_job.push({\n                                name: i.task_name,\n                                id: iter_id,\n                                parentId: 0,\n                                time: i.start_time,\n                                value: i.inst_num\n                            });\n                            iter_id++;\n                        }\n                    }\n        \n        \n                    for (let i of task_job) {\n                        for (let j of task_job) {\n                            if (i == j) continue;\n                            else if (i.parentId != 0 && i.time != j.time) continue;\n                            else {\n                                if (i.name.slice(0, 1) != j.name.slice(0, 1)) continue;\n                                else {\n                                    var tempi = i.name.slice(3).split('_');\n        \n                                    var tempj = j.name.split('_')[0].slice(1);\n                                    if (tempi.indexOf(tempj) != -1) {\n                                        i.parentId = j.id;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    for (let i of job_data) {\n                        for (let j of chart_data) {\n                            if (j.time == i.time && j.parentId == 0) {\n                                j.parentId = i.id;\n                            }\n                        }\n                        for (let j of task_job) {\n                            if (j.time == i.time && j.parentId == 0) {\n                                j.parentId = i.id;\n                            }\n                        }\n                    }\n                    chart_data = [...job_data, ...chart_data, ...task_job]\n                    // console.log(generateOptions(chart_data))\n                    // console.log(job_data)\n                    generateOptions(chart_data)\n                    let final_data = compute_value(generateOptions(chart_data))\n        \n                    return final_data\n                    // console.log(tm1)   \n                }\n                //var time = 87076\n                var time=time_\n                var tm1 = data_get(time)\n                var judge_job = 'j';\n                myChart4.setOption(\n                     {\n                        visualMap: {\n                            type: 'continuous',\n                            min: 0,\n                            max: 10,\n                            inRange: {\n                                color: ['#2D5F73', '#538EA6', '#F2D1B3', '#F2B8A2', '#F28C8C', ]\n                            }\n                        },\n                        series: {\n                            type: 'sunburst',\n                            highlightPolicy: 'descendant',\n                            data: tm1,\n                            radius: [0, '90%'],\n                            label: {\n                                rotate: 'radial'\n                            }\n                        },\n                        tooltip: {\n                            tirgger: \"axis\",\n                            formatter(params) {\n                                if (!params.data.name.indexOf(judge_job)) {\n                                    return `job_name:${params.data.name} <br/>\n                            task_num:${Object.keys(params.data.children).length}`;\n                                } else {\n                                    return `task_name:${params.data.name}<br/>\n                            instance_num:${params.data.value}`;\n                                }\n                            },\n                            axisPointer: {\n                                type: 'cross',\n                                animation: 'false',\n                                label: {\n                                    backgroundColor: 'red'\n                                }\n                            }\n                        },\n        \n                    })\n        \n            \n       }\n        \n    } \n\n    render() {\n        return (\n            <div >\n                \n            </div>\n        )\n    }\n}",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":12,"column":16,"nodeType":"89","messageId":"90","endLine":12,"endColumn":23},{"ruleId":"87","severity":1,"message":"91","line":24,"column":13,"nodeType":"89","messageId":"90","endLine":24,"endColumn":16},{"ruleId":"92","severity":1,"message":"93","line":26,"column":13,"nodeType":"89","messageId":"94","endLine":26,"endColumn":19},{"ruleId":"95","severity":1,"message":"96","line":56,"column":62,"nodeType":"97","messageId":"98","endLine":56,"endColumn":63},{"ruleId":"87","severity":1,"message":"99","line":33,"column":13,"nodeType":"89","messageId":"90","endLine":33,"endColumn":30},{"ruleId":"83","replacedBy":"100"},{"ruleId":"85","replacedBy":"101"},{"ruleId":"87","severity":1,"message":"102","line":8,"column":5,"nodeType":"89","messageId":"90","endLine":8,"endColumn":9},{"ruleId":"87","severity":1,"message":"103","line":2,"column":12,"nodeType":"89","messageId":"90","endLine":2,"endColumn":14},{"ruleId":"87","severity":1,"message":"104","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":9},{"ruleId":"87","severity":1,"message":"105","line":7,"column":5,"nodeType":"89","messageId":"90","endLine":7,"endColumn":10},{"ruleId":"106","severity":1,"message":"107","line":60,"column":48,"nodeType":"97","messageId":"108","endLine":60,"endColumn":50},{"ruleId":"109","severity":1,"message":"110","line":76,"column":38,"nodeType":"111","messageId":"112","endLine":76,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":78,"column":46,"nodeType":"97","messageId":"108","endLine":78,"endColumn":48},{"ruleId":"106","severity":1,"message":"107","line":111,"column":35,"nodeType":"97","messageId":"108","endLine":111,"endColumn":37},{"ruleId":"106","severity":1,"message":"107","line":160,"column":35,"nodeType":"97","messageId":"108","endLine":160,"endColumn":37},{"ruleId":"106","severity":1,"message":"113","line":161,"column":49,"nodeType":"97","messageId":"108","endLine":161,"endColumn":51},{"ruleId":"106","severity":1,"message":"113","line":161,"column":64,"nodeType":"97","messageId":"108","endLine":161,"endColumn":66},{"ruleId":"106","severity":1,"message":"113","line":163,"column":56,"nodeType":"97","messageId":"108","endLine":163,"endColumn":58},{"ruleId":"106","severity":1,"message":"113","line":168,"column":62,"nodeType":"97","messageId":"108","endLine":168,"endColumn":64},{"ruleId":"106","severity":1,"message":"107","line":177,"column":40,"nodeType":"97","messageId":"108","endLine":177,"endColumn":42},{"ruleId":"106","severity":1,"message":"107","line":177,"column":64,"nodeType":"97","messageId":"108","endLine":177,"endColumn":66},{"ruleId":"106","severity":1,"message":"107","line":182,"column":40,"nodeType":"97","messageId":"108","endLine":182,"endColumn":42},{"ruleId":"106","severity":1,"message":"107","line":182,"column":64,"nodeType":"97","messageId":"108","endLine":182,"endColumn":66},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'Content' is assigned a value but never used.","Identifier","unusedVar","'app' is assigned a value but never used.","no-redeclare","'option' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'machine_duqu_flag' is assigned a value but never used.",["114"],["115"],"'time' is defined but never used.","'d3' is defined but never used.","'$' is defined but never used.","'time_' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","unexpected","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]